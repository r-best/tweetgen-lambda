import json
import numbers

import twitter
import service

def handler(event, context):
    print("Incoming event:")
    print(event)

    err_builder = ErrorResponseBuilder(context['aws_request_id'])

    request = json.loads(event['body'])    
    if err := input_validation(request, err_builder):
        return err

    tweets = list()
    for user in request['users']:
        print(f"Fetching {user['count']} latest tweets from @{user['username']}...", flush=True)
        user_tweets = twitter.get_user_tweets(user['username'], user['count'])
        if isinstance(user_tweets, tuple):
            return err_builder.format_error_response(user_tweets[0], user_tweets[1])
        else:
            tweets += user_tweets

    # Remove stopwords, hyperlinks, etc..
    print("Running preprocess steps...", flush=True)
    tweets = service.preprocess(tweets)

    print("Building Markov model...", flush=True)
    P, n1_index_mapping, token_index_mapping = service.buildModel(tweets, request['N'])

    print("Generating tweets...", flush=True)
    newTweets = list()
    for _ in range(request['M']):
        newTweets.append(service.generateTweet(request['N'], P, n1_index_mapping, token_index_mapping))

    return {
        "statusCode": 200,
        "body": json.dumps({
            "tweets": newTweets,
        })
    }

class ErrorResponseBuilder:
    def __init__(self, execution_id: str) -> None:
        self.execution_id = execution_id
        pass

    def format_error_response(self, statusCode: int, message: str):
        return {
            "execution_id": self.execution_id,
            "statusCode": statusCode,
            "body": json.dumps({
                "error": message
            })
        }

def input_validation(request: dict, erb: ErrorResponseBuilder):
    if not isinstance(request['N'], int):
        return erb.format_error_response(400, "Invalid value for N. Must be an integer in the range [2,6]")
    if request['N'] < 2:
        return erb.format_error_response(400, "Value of N cannot be less than 2")
    elif request['N'] > 6:
        return erb.format_error_response(400, "Value of N cannot be greater than 6, due to performance constraints. Values this high are also more likely to recreate existing tweets than create new ones.")
    
    if not isinstance(request['M'], int):
        return erb.format_error_response(400, "Invalid value for M. Must be an integer in the range [1,1000]")
    if request['M'] < 1:
        return erb.format_error_response(400, "Value of M must be at least 1 (We're here to generate at least one new tweet!)")
    if request['M'] > 1000:
        return erb.format_error_response(400, "Value of M must be at most 1000. Come on now. You don't need THAT many autogenerated tweets.")
    
    num_tweets_sum = 0
    for user in request['users']:
        if not isinstance(user['username'], str) or len(user['username']) > 15:
            return erb.format_error_response(400, f"Username @{user['username']} is not a valid Twitter username")
        if not isinstance(user['count'], int):
            return erb.format_error_response(400, f"Invalid number of tweets to fetch for user @{user['username']}, should be an integer in the range [1,500]")
        num_tweets_sum += user['count']
    if num_tweets_sum < 1:
        return erb.format_error_response(400, "Total number of tweets to fetch across all requested users should be at least 1")
    if num_tweets_sum > 500:
        return erb.format_error_response(400, "Total number of tweets to fetch across all requested users must not be over 500")
